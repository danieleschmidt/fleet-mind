version: '3.8'

services:
  # Fleet-Mind Coordinator (Main Application)
  fleet-mind-coordinator:
    build:
      context: .
      dockerfile: Dockerfile.production
    image: fleet-mind:latest
    container_name: fleet-mind-coordinator
    environment:
      - FLEET_MIND_ENV=production
      - FLEET_MIND_LOG_LEVEL=INFO
      - FLEET_MIND_SECURITY_LEVEL=HIGH
      - FLEET_MIND_ENABLE_OPTIMIZATION=true
      - FLEET_MIND_ENABLE_DISTRIBUTED=true
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongodb:27017/fleet_mind
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "8000:8000"  # API server
      - "8080:8080"  # WebRTC signaling
    depends_on:
      - redis
      - mongodb
      - prometheus
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    networks:
      - fleet-mind-network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Distributed Worker Nodes
  fleet-mind-worker-1:
    build:
      context: .
      dockerfile: Dockerfile.worker
    image: fleet-mind-worker:latest
    container_name: fleet-mind-worker-1
    environment:
      - FLEET_MIND_ENV=production
      - FLEET_MIND_NODE_TYPE=worker
      - FLEET_MIND_NODE_ID=worker-1
      - FLEET_MIND_COORDINATOR_URL=http://fleet-mind-coordinator:8000
      - REDIS_URL=redis://redis:6379
    depends_on:
      - fleet-mind-coordinator
      - redis
    networks:
      - fleet-mind-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  fleet-mind-worker-2:
    build:
      context: .
      dockerfile: Dockerfile.worker
    image: fleet-mind-worker:latest
    container_name: fleet-mind-worker-2
    environment:
      - FLEET_MIND_ENV=production
      - FLEET_MIND_NODE_TYPE=worker
      - FLEET_MIND_NODE_ID=worker-2
      - FLEET_MIND_COORDINATOR_URL=http://fleet-mind-coordinator:8000
      - REDIS_URL=redis://redis:6379
    depends_on:
      - fleet-mind-coordinator
      - redis
    networks:
      - fleet-mind-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis for distributed coordination and caching
  redis:
    image: redis:7-alpine
    container_name: fleet-mind-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - fleet-mind-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB for persistent data storage
  mongodb:
    image: mongo:6
    container_name: fleet-mind-mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
      - MONGO_INITDB_DATABASE=fleet_mind
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
      - ./config/mongodb-init.js:/docker-entrypoint-initdb.d/init.js
    networks:
      - fleet-mind-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: fleet-mind-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - fleet-mind-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: fleet-mind-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - fleet-mind-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: fleet-mind-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    networks:
      - fleet-mind-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Elasticsearch for log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: fleet-mind-elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=fleet-mind-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - fleet-mind-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: fleet-mind-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - fleet-mind-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # NGINX reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: fleet-mind-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    depends_on:
      - fleet-mind-coordinator
    networks:
      - fleet-mind-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

volumes:
  redis-data:
  mongodb-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:

networks:
  fleet-mind-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16