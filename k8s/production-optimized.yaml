apiVersion: v1
kind: Namespace
metadata:
  name: fleet-mind-production
  labels:
    app: fleet-mind
    environment: production

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: fleet-mind-coordinator
  namespace: fleet-mind-production
  labels:
    app: fleet-mind
    component: coordinator
    tier: control-plane
spec:
  replicas: 3  # High availability
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: fleet-mind
      component: coordinator
  template:
    metadata:
      labels:
        app: fleet-mind
        component: coordinator
        tier: control-plane
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8080"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: coordinator
        image: fleet-mind:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8443
          name: https
        - containerPort: 9090
          name: metrics
        env:
        - name: FLEET_MIND_MODE
          value: "coordinator"
        - name: FLEET_MIND_SECURITY_LEVEL
          value: "HIGH"
        - name: FLEET_MIND_MAX_DRONES
          value: "1000"
        - name: FLEET_MIND_ENABLE_MONITORING
          value: "true"
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: fleet-mind-secrets
              key: redis-url
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: fleet-mind-secrets
              key: openai-api-key
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "8Gi"
            cpu: "4000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: certs
          mountPath: /app/certs
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: fleet-mind-config
      - name: certs
        secret:
          secretName: fleet-mind-tls
      nodeSelector:
        kubernetes.io/arch: amd64
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - coordinator
              topologyKey: kubernetes.io/hostname

---

apiVersion: v1
kind: Service
metadata:
  name: fleet-mind-coordinator-service
  namespace: fleet-mind-production
  labels:
    app: fleet-mind
    component: coordinator
spec:
  selector:
    app: fleet-mind
    component: coordinator
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: https
    port: 443
    targetPort: 8443
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  type: LoadBalancer
  loadBalancerSourceRanges:
  - "10.0.0.0/8"  # Internal network only

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: fleet-mind-webrtc-signaling
  namespace: fleet-mind-production
  labels:
    app: fleet-mind
    component: webrtc-signaling
    tier: communication
spec:
  replicas: 2
  selector:
    matchLabels:
      app: fleet-mind
      component: webrtc-signaling
  template:
    metadata:
      labels:
        app: fleet-mind
        component: webrtc-signaling
        tier: communication
    spec:
      containers:
      - name: webrtc-signaling
        image: fleet-mind:latest
        command: ["python3", "-m", "fleet_mind.communication.webrtc_server"]
        ports:
        - containerPort: 8081
          name: signaling
        env:
        - name: FLEET_MIND_MODE
          value: "webrtc_signaling"
        - name: SIGNALING_PORT
          value: "8081"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"

---

apiVersion: v1
kind: Service
metadata:
  name: fleet-mind-webrtc-service
  namespace: fleet-mind-production
spec:
  selector:
    app: fleet-mind
    component: webrtc-signaling
  ports:
  - port: 8081
    targetPort: 8081
    protocol: TCP
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: fleet-mind-production
  labels:
    app: redis
    tier: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        tier: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - "/redis-master/redis.conf"
        resources:
          requests:
            memory: "1Gi"
            cpu: "250m"
          limits:
            memory: "4Gi"
            cpu: "1000m"
        volumeMounts:
        - mountPath: /redis-master-data
          name: data
        - mountPath: /redis-master
          name: config
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: redis-data
      - name: config
        configMap:
          name: redis-config
          items:
          - key: redis-config
            path: redis.conf

---

apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: fleet-mind-production
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data
  namespace: fleet-mind-production
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: fleet-mind-production
data:
  redis-config: |
    maxmemory 4gb
    maxmemory-policy allkeys-lru
    save 900 1
    save 300 10
    save 60 10000
    tcp-keepalive 300
    timeout 300

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: fleet-mind-config
  namespace: fleet-mind-production
data:
  config.yaml: |
    coordinator:
      llm_model: "gpt-4o"
      max_drones: 1000
      update_rate: 10.0
      security_level: "HIGH"
      enable_health_monitoring: true
    
    communication:
      protocol: "webrtc"
      encryption: "dtls"
      compression: true
      qos: "reliable_ordered"
    
    monitoring:
      check_interval: 30.0
      alert_cooldown: 300.0
      enable_system_monitoring: true
      enable_network_monitoring: true
    
    security:
      key_rotation_interval: 3600.0
      enable_threat_detection: true
      blocked_ip_ttl: 86400.0
    
    performance:
      strategy: "balanced"
      optimization_threshold: 0.8
      enable_auto_optimization: true
      cache_enabled: true
    
    scaling:
      min_instances: 3
      max_instances: 20
      scale_up_threshold: 0.8
      scale_down_threshold: 0.3

---

apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: fleet-mind-coordinator-pdb
  namespace: fleet-mind-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: fleet-mind
      component: coordinator

---

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fleet-mind-coordinator-hpa
  namespace: fleet-mind-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fleet-mind-coordinator
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fleet-mind-network-policy
  namespace: fleet-mind-production
spec:
  podSelector:
    matchLabels:
      app: fleet-mind
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - namespaceSelector:
        matchLabels:
          name: fleet-mind-production
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8081
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: fleet-mind-production
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---

apiVersion: v1
kind: Secret
metadata:
  name: fleet-mind-secrets
  namespace: fleet-mind-production
type: Opaque
data:
  # These should be base64 encoded in production
  redis-url: cmVkaXM6Ly9yZWRpcy1zZXJ2aWNlOjYzNzk=  # redis://redis-service:6379
  openai-api-key: cGxhY2Vob2xkZXItYXBpLWtleQ==  # placeholder-api-key

---

apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: fleet-mind-metrics
  namespace: fleet-mind-production
  labels:
    app: fleet-mind
spec:
  selector:
    matchLabels:
      app: fleet-mind
      component: coordinator
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics