apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fleet-mind-ingress
  namespace: fleet-mind
  labels:
    app: fleet-mind
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    # WebRTC support
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    nginx.ingress.kubernetes.io/proxy-set-headers: |
      Upgrade $http_upgrade
      Connection "upgrade"
    # CORS headers for WebRTC
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization, Content-Type, Accept"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - fleet-mind.yourdomain.com
    - api.fleet-mind.yourdomain.com
    secretName: fleet-mind-tls
  rules:
  # Main API and WebRTC endpoint
  - host: fleet-mind.yourdomain.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: fleet-mind-coordinator
            port:
              number: 8081
      - path: /webrtc
        pathType: Prefix
        backend:
          service:
            name: fleet-mind-coordinator
            port:
              number: 8080
      - path: /metrics
        pathType: Prefix
        backend:
          service:
            name: fleet-mind-coordinator
            port:
              number: 8082
  
  # API-specific subdomain
  - host: api.fleet-mind.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fleet-mind-coordinator
            port:
              number: 8081

---
# HorizontalPodAutoscaler for automatic scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fleet-mind-coordinator-hpa
  namespace: fleet-mind
  labels:
    app: fleet-mind-coordinator
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fleet-mind-coordinator
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: fleet-mind-coordinator-pdb
  namespace: fleet-mind
  labels:
    app: fleet-mind-coordinator
spec:
  minAvailable: 2  # Keep at least 2 pods running during disruptions
  selector:
    matchLabels:
      app: fleet-mind-coordinator